{{ if not .Values.disable }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Values.name }}
spec:
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  replicas: {{ .Values.replicaCount }}
  selector:
      matchLabels:
        app: {{ .Release.Name }}-kafka-consumer
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-kafka-consumer
        {{- range $key, $value := .Values.podLabels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
      annotations:
      {{- if .Values.metrics }}
        prometheus.io/path: {{ .Values.metrics.path }}
        prometheus.io/port: {{ .Values.port | quote }}
        prometheus.io/scrape: {{ .Values.metrics.enabled | quote }}
      {{- end }}
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      containers:
        - name: {{ .Release.Name }}-{{ .Values.name }}
          image: {{ .Values.image.name }}:{{ .Values.image.tag }}
          imagePullPolicy: Always
{{ if .Values.auth.enabled }}
  {{ if not .Values.auth.saslPassword }}
          volumeMounts:
            - name: kafka-secrets-volume
              mountPath: /secrets-files
  {{ end }}
{{ end }}
          ports:
            - containerPort: {{ .Values.port }}
              name: main
          env:
            {{ if .Values.jvmOpts }}
            - name: JAVA_OPTS
              value: {{ .Values.jvmOpts | squote }}
            {{ end }}
            - name: KAFKA_BROKER
              value: {{ .Values.broker }}
            - name: GROUP_ID
              value: {{ .Values.groupId | default .Release.Name }}
            {{ if .Values.target.port }}
            - name: TARGET_PORT
              value: {{ .Values.target.port | squote }}
            {{ end }}
            {{ if .Values.target.useK8sServiceHostName }}
            - name: K8S_SERVICE_HOST_ENV_VAR
              value: {{ printf "%s_SERVICE_HOST" (.Release.Name | upper | replace "-" "_") }}
            {{ else }}
            - name: TARGET_BASE_URL
              value: {{ .Values.target.baseUrl | default (printf "http://%s" .Release.Name) }}:{{ .Values.target.port }}
            {{ end }}
            - name: TOPICS_ROUTES
              value: {{ range $index, $topicRoute := .Values.target.topicsRoutes }}{{- if eq $index 0}} {{- else}},{{- end}}{{ $topicRoute.topic }}:{{ $topicRoute.route }}{{- end}}
            {{- if .Values.target.healthcheck  }}
            - name: TARGET_HEALTHCHECK
              value: {{ .Values.target.healthcheck }}
            {{- end }}
            {{- if .Values.retry  }}
            - name: RETRY_TOPIC
              value: {{ .Values.retry.topic | default (printf "%s-retry" .Release.Name) }}
             {{- if .Values.retry.whenStatusCodeMatch }}
            - name: PRODUCE_TO_RETRY_TOPIC_WHEN_STATUS_CODE_MATCH
              value: {{ .Values.retry.whenStatusCodeMatch | squote }}
            {{- end }}
             {{- end }}
            {{- if .Values.deadLetter }}
            - name: DEAD_LETTER_TOPIC
              value: {{ .Values.deadLetter.topic | default (printf "%s-dead-letter" .Release.Name) }}
            {{- if .Values.deadLetter.whenStatusCodeMatch }}
            - name: PRODUCE_TO_DEAD_LETTER_TOPIC_WHEN_STATUS_CODE_MATCH
              value: {{ .Values.deadLetter.whenStatusCodeMatch | squote }}
            {{- end }}
            {{- end }}
            - name: PROCESSING_DELAY
              value: {{ .Values.target.pocessingDelay | default "0" | squote}}
            - name: USE_PROMETHEUS
              value: {{ .Values.metrics.enabled | squote }}
            - name: MONITORING_SERVER_PORT
              value: {{ .Values.port | squote }}
            {{- if .Values.maxPollRecords }}
            - name: MAX_POLL_RECORDS
              value: {{ .Values.maxPollRecords | squote }}
            {{- end }}
            {{- if .Values.targetTimeoutMs }}
            - name: TARGET_TIMEOUT_MS
              value: {{ .Values.targetTimeoutMs | squote }}
            {{- end }}
            {{- if .Values.sessionTimeoutMs }}
            - name: SESSION_TIMEOUT
              value: {{ .Values.sessionTimeoutMs | squote }}
            {{- end }}      
            {{- if .Values.retryPolicyMaxDurationMs }}
            - name: RETRY_POLICY_MAX_DURATION_MS
              value: {{ .Values.retryPolicyMaxDurationMs | squote }}
            {{- end }}    
            {{- if .Values.kafkaPollIntervalMs }}
            - name: KAFKA_POLL_INTERVAL_MS
              value: {{ .Values.kafkaPollIntervalMs | squote }}
            {{- end }}     
            - name: USE_SASL_AUTH
              value: {{ .Values.auth.enabled | squote }}
            - name: ROOT_LOG_LEVEL
              value: {{ .Values.logLevel }}
            - name: BODY_HEADERS_PATHS
              value: {{ .Values.bodyHeadersPaths | squote }}
        {{- if .Values.auth.enabled }}
            - name: SASL_USERNAME
              value: {{ .Values.auth.saslUsername }}
            - name: SASL_MECHANISM
              value: {{ .Values.auth.saslMechanism }}              
            {{- if .Values.auth.saslPassword }}
            - name: SASL_PASSWORD
              value: {{ .Values.auth.saslPassword | squote }}
            {{- else if .Values.auth.secrets.useOpaqueSecrets }}
            - name: SASL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-kafka-consumer
                  key: SASL_PASSWORD
            {{- else }}
            - name: SASL_PASSWORD_FILE_PATH
              value: /secrets-files/SASL_PASSWORD
            {{- end }}
            {{- if .Values.auth.secrets.useTruststore }}
            - name: TRUSTSTORE_FILE_PATH
              value: /secrets-files/TRUSTSTORE
            {{- if .Values.auth.secrets.useOpaqueSecrets}}
            - name: TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-kafka-consumer
                  key: TRUSTSTORE_PASSWORD
            {{- else }}
            - name: TRUSTSTORE_PASSWORD_FILE_PATH
              value: /secrets-files/TRUSTSTORE_PASSWORD
            {{- end }}
            {{- end }}
        {{- end }}
         {{ if .Values.connectionPool}}
            {{ if hasKey .Values.connectionPool "maxIdle"}}
            - name: CONNECTION_POOL_MAX_IDLE_CONNECTIONS
              value: {{ .Values.connectionPool.maxIdle | squote }}
            {{ end }}
            {{ if hasKey .Values.connectionPool "keepAliveDurationMS"}}
            - name: CONNECTION_POOL_KEEP_ALIVE_DURATION_MS
              value: {{ .Values.connectionPool.keepAliveDurationMS  | squote }}
            {{ end }}
            {{ end }}          
            {{ if .Values.retryPolicyExponentialBackoff }}
            - name: RETRY_POLICY_EXPONENTIAL_BACKOFF
              value: {{ .Values.retryPolicyExponentialBackoff | squote }}
            {{ end }}
            {{ if .Values.connectionFailureRetryPolicyExponentialBackoff }}
            - name: CONNECTION_FAILURE_RETRY_POLICY_EXPONENTIAL_BACKOFF
              value: {{ .Values.connectionFailureRetryPolicyExponentialBackoff | squote }}
            {{ end }}
            {{ if .Values.retryPolicyMaxRetries }}
            - name: RETRY_POLICY_MAX_RETRIES
              value: {{ .Values.retryPolicyMaxRetries | squote }}
            {{ end }}
            {{ if .Values.connectionFailureRetryPolicyMaxRetries }}
            - name: CONNECTION_FAILURE_RETRY_POLICY_MAX_RETRIES
              value: {{ .Values.connectionFailureRetryPolicyMaxRetries | squote }}
            {{ end }}
            {{ if .Values.connectionFailureRetryPolicyMaxDurationMS }}
            - name: CONNECTION_FAILURE_RETRY_POLICY_MAX_DURATION_MS
              value: {{ .Values.connectionFailureRetryPolicyMaxDurationMS | squote }}
            {{ end }}
          startupProbe:
            httpGet:
              path: /alive
              port: {{ .Values.port }}
            failureThreshold:  {{ .Values.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
          livenessProbe:
            httpGet:
              path: /alive
              port: {{ .Values.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          readinessProbe:
            httpGet:
              path: /ready
              port: {{ .Values.port }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
{{ if .Values.auth.enabled }}
  {{ if not .Values.auth.saslPassword }}
      volumes:
        - name: kafka-secrets-volume
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              {{- if .Values.auth.secretProviderClassName }}
              secretProviderClass: {{ .Values.auth.secretProviderClassName }}
              {{- else }}
              secretProviderClass: {{ .Release.Name }}-kafka-consumer
              {{ end }}
  {{ end }}
{{ end }}
{{ end }}